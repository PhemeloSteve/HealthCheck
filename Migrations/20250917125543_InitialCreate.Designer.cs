// <auto-generated />
using System;
using HealthCheck.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealtCheck.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917125543_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthCheck.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedByClerkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByClerkId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthCheck.Models.Clerk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Clerks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "clerk-user-1",
                            Email = "clerk.one@clinic.com",
                            FirstName = "Clerk",
                            LastName = "One",
                            OrganizationId = 1,
                            PhoneNumber = "7890123456"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "clerk-user-2",
                            Email = "clerk.two@medical.com",
                            FirstName = "Clerk",
                            LastName = "Two",
                            OrganizationId = 2,
                            PhoneNumber = "8901234567"
                        });
                });

            modelBuilder.Entity("HealthCheck.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "client-user-1",
                            Email = "john.doe@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            OrganizationId = 1,
                            PhoneNumber = "4567890123"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "client-user-2",
                            Email = "jane.roe@email.com",
                            FirstName = "Jane",
                            LastName = "Roe",
                            OrganizationId = 2,
                            PhoneNumber = "5678901234"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "client-user-3",
                            Email = "sam.green@email.com",
                            FirstName = "Sam",
                            LastName = "Green",
                            OrganizationId = 1,
                            PhoneNumber = "6789012345"
                        });
                });

            modelBuilder.Entity("HealthCheck.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "doc-user-1",
                            Email = "alice.smith@clinic.com",
                            FirstName = "Alice",
                            LastName = "Smith",
                            OrganizationId = 1,
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "doc-user-2",
                            Email = "bob.jones@medical.com",
                            FirstName = "Bob",
                            LastName = "Jones",
                            OrganizationId = 2,
                            PhoneNumber = "2345678901"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "doc-user-3",
                            Email = "carol.white@clinic.com",
                            FirstName = "Carol",
                            LastName = "White",
                            OrganizationId = 1,
                            PhoneNumber = "3456789012"
                        });
                });

            modelBuilder.Entity("HealthCheck.Models.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 3,
                            SpecializationId = 3
                        });
                });

            modelBuilder.Entity("HealthCheck.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AdminApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Cityville",
                            AdminApplicationUserId = "admin-user-1",
                            Email = "info@cityhealth.com",
                            Name = "City Health Clinic",
                            PhoneNumber = "1112223333"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Center Ave, Downtown",
                            AdminApplicationUserId = "admin-user-2",
                            Email = "contact@downtownmed.com",
                            Name = "Downtown Medical Center",
                            PhoneNumber = "4445556666"
                        });
                });

            modelBuilder.Entity("HealthCheck.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeposit")
                        .HasColumnType("bit");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100.00m,
                            AppointmentId = 1,
                            IsDeposit = false,
                            Method = 0,
                            PaymentDate = new DateTime(2025, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TransactionId = "TXN1001"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 150.00m,
                            AppointmentId = 2,
                            IsDeposit = false,
                            Method = 1,
                            PaymentDate = new DateTime(2025, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TransactionId = "TXN1002"
                        });
                });

            modelBuilder.Entity("HealthCheck.Models.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundTransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Refunds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 20.00m,
                            PaymentId = 1,
                            Reason = "Duplicate payment",
                            RefundDate = new DateTime(2025, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RefundTransactionId = "REFUND1001"
                        });
                });

            modelBuilder.Entity("HealthCheck.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("HealthCheck.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Heart and blood vessel specialist.",
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Skin, hair, and nail specialist.",
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Child health specialist.",
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Brain and nervous system specialist.",
                            Name = "Neurology"
                        });
                });

            modelBuilder.Entity("HealthCheck.Models.Appointment", b =>
                {
                    b.HasOne("HealthCheck.Models.Clerk", "ApprovedByClerk")
                        .WithMany("ManagedAppointments")
                        .HasForeignKey("ApprovedByClerkId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HealthCheck.Models.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCheck.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByClerk");

                    b.Navigation("Client");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthCheck.Models.Clerk", b =>
                {
                    b.HasOne("HealthCheck.Models.Organization", "Organization")
                        .WithMany("Clerks")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("HealthCheck.Models.Client", b =>
                {
                    b.HasOne("HealthCheck.Models.Organization", "Organization")
                        .WithMany("Clients")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("HealthCheck.Models.Doctor", b =>
                {
                    b.HasOne("HealthCheck.Models.Organization", "Organization")
                        .WithMany("Doctors")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("HealthCheck.Models.DoctorSpecialization", b =>
                {
                    b.HasOne("HealthCheck.Models.Doctor", "Doctor")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCheck.Models.Specialization", "Specialization")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HealthCheck.Models.Payment", b =>
                {
                    b.HasOne("HealthCheck.Models.Appointment", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("HealthCheck.Models.Payment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HealthCheck.Models.Refund", b =>
                {
                    b.HasOne("HealthCheck.Models.Payment", "Payment")
                        .WithOne("Refund")
                        .HasForeignKey("HealthCheck.Models.Refund", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("HealthCheck.Models.Schedule", b =>
                {
                    b.HasOne("HealthCheck.Models.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthCheck.Models.Appointment", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCheck.Models.Clerk", b =>
                {
                    b.Navigation("ManagedAppointments");
                });

            modelBuilder.Entity("HealthCheck.Models.Client", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HealthCheck.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorSpecializations");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("HealthCheck.Models.Organization", b =>
                {
                    b.Navigation("Clerks");

                    b.Navigation("Clients");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HealthCheck.Models.Payment", b =>
                {
                    b.Navigation("Refund")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCheck.Models.Specialization", b =>
                {
                    b.Navigation("DoctorSpecializations");
                });
#pragma warning restore 612, 618
        }
    }
}
